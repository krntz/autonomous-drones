#!/usr/bin/env python3

from enum import Enum, auto, unique

import numpy as np
from entities.vegetation.vegetation import Vegetation, VegetationTypes

__author__ = "Amandus Krantz"
__credits__ = ["Rachael Garrett", "Joseph La Delfa"]
__license__ = "GPL-3"
__maintainer__ = "Amandus Krantz"
__email__ = "amandus.krantz@lucs.lu.se"
__status__ = "Prototype"


class PowerFungus(Vegetation):
    @unique
    class _States(Enum):
        IDLE: int = auto()
        CHARGING: int = auto()

    def __init__(self,
                 uid: str,
                 position: any
                 residents: list,
                 occupants: list | None = None):
        super().__init__(uid=uid,
                         position=position,
                         collision_radius=0.35,
                         activation_radius=None)

        self._state = self._States.IDLE
        self._type = VegetationTypes.POWER_FUNGUS

        self._residents = residents

        if not occupants:
            self._occupants = residents
        else:
            self._occupants = occupants

        self._pollen_level = 0

        # TODO: 2023-06-19 Tweak these
        self._deposit_rate = 1
        self._pollen_capacity = 50

    def deposit_pollen(self) -> int:
        """
        SwarmBoids can ask for some of the pollen that has been generated by
        the PowerFungus.

        If there is no pollen available, the PowerFungus won't deposit any
        pollen.
        """

        # TODO: 2023-06-19 Should the PowerFungus only give pollen to SwarmBoids that
        # are residents?

        if (self._pollen_level - self._deposit_rate) < 0:
            return 0
        else:
            self._pollen_level -= self._deposit_rate

            return self._deposit_rate
